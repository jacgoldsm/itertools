% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/that_for_{all,any}.R
\name{sets}
\alias{sets}
\alias{that_for_all}
\alias{that_for_any}
\alias{we_have}
\title{R Set Comprehension}
\usage{
that_for_all(.x, .y)

that_for_any(.x, .y)

we_have(that_for, formula, result = "vector")
}
\arguments{
\item{.x}{A set, represented as either an atomic vector or a list}

\item{.y}{A set to compare to \code{.x}}

<<<<<<< HEAD
\item{that_for}{A list passed to \code{we_have}--can be ignored with proper syntax}

=======
>>>>>>> 4740ccddd35aa43b82ae3f65d3fa181262711579
\item{formula}{A boolean-valued function, lambda, or formula}

\item{result}{Should the expression return a \code{vector} or an \code{Iterator}?}
}
\value{
For that_for_all and that_for_any, an object of S3 class that_for_all or that_for_any.
For we_have, a vector of the same type as .x if \code{return == 'vector'} and an Iterator object if \code{return == 'Iterator'}.
}
\description{
Set comprehension with the Magrittr Pipe.
Always use the syntax:
\code{.x \%>\% that_for_all(f(.x)) \%>\% we_have(f(.x, .y))}.
}
\note{
if set2 is an numeric vector, you probably want a value obtained from
\code{itertools::range(start, end)} rather than start:end or seq(start,end), as when
start is greater than end you want an empty vector rather than counting backwards.
Note that \code{itertools::range} views end as a supremum, not a maximum, thus range(a,b)
is equivalent to the set \code{[}a,b) when a < b or \code{{}} when b >= a.
}
\examples{
library(magrittr)
2:100 \%>\% that_for_all(range(2, .x)) \%>\% we_have(function(.x, .y) .x \%\% .y != 0) #is the same as
2:100 \%>\% that_for_all(range(2, .x)) \%>\% we_have(~.x \%\% .y != 0)
#c.f.
primes <- 2:100 \%>\% that_for_all(range(2, .x)) \%>\% we_have(~.x \%\% .y != 0, "Iterator")
yield_next(primes)
<<<<<<< HEAD
\dontrun{c("I", "Don't", "wan't", "chicken") \%>\%
             that_for_all("\'") \%>\%
             we_have(~stringr::str_detect(.x, .y))}
=======
c("I", "Don't", "wan't", "chicken") \%>\% that_for_all("\'") \%>\% we_have(~stringr::str_detect(.x, .y))
>>>>>>> 4740ccddd35aa43b82ae3f65d3fa181262711579
#Twin primes 1 through 100
primes <- 2:100 \%>\% that_for_all(range(2, .x)) \%>\% we_have(~.x \%\% .y != 0)
primes \%>\% that_for_any(primes) \%>\% we_have(~abs(.x - .y) == 2)
#Prime numbers 1 through 100 that are two away from a square number
<<<<<<< HEAD
(2:100 \%>\% that_for_all(range(2,.x)) \%>\% we_have(~.x \%\% .y != 0)) \%>\%
=======
(2:100 \%>\% that_for_all(range(2, ,.x)) \%>\% we_have(~.x \%\% .y != 0)) \%>\%
>>>>>>> 4740ccddd35aa43b82ae3f65d3fa181262711579
    that_for_any(range(2, .x)) \%>\% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)

}
