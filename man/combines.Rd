% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine.R
\name{combine}
\alias{combine}
\alias{insert}
\alias{c.iterstring}
\title{Combine \code{iterstring}s easily}
\usage{
insert(string, newstring, pos)

\method{c}{iterstring}(string1, string2)
}
\arguments{
\item{string}{the starting \code{iterstring} (or \code{character} vec of length 1, coerced)}

\item{newstring}{an \code{iterstring} (or \code{character} vec. of length 1, coerced) to insert}

\item{pos}{the position \emph{after which} \code{newstring} will be inserted}

\item{string1}{the first \code{iterstring} in \code{c.iterstring()}}

\item{string2}{the second \code{iterstring} in \code{c.iterstring()}}
}
\description{
\code{c.iterstring()} does exactly what you would expect it to, concatenating two
\code{iterstring}s and stripping their attributes (except \code{class}). \code{insert()} inserts
an \code{iterstring} \emph{after} \code{pos} (remember, R-style indices starting with 1).

Negative indices work the same as with [\verb{[.iterstring}]â€”inserting a string at \code{pos} of
\code{-1} means putting it at the \emph{end} of the string, i.e. after \code{str[-1]}, the last character
of \code{str}.
}
