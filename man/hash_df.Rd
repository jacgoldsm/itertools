% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hash_df.R
\name{hash_df}
\alias{hash_df}
\title{Hashed (Random-access) \code{data.frame}s}
\value{
A \code{hash_df} object, built on \code{R6} and \code{env} \code{S3} classes
}
\description{
Create a \code{data.frame} built on the \code{environment}
\code{S3} class and embedded in an \code{R6} object. The primary advantage
of this structure is the reference semantics, which means that
elements (in this case \code{data.frame} columns) are not copied upon
modification. Although modern R avoids making deep copies of
\code{data.frame}s when they are modified, the copy on modify semantics
applied to the container (the list of pointers to the columns of the \code{data.frame}),
can still significantly slow down loops that modify large numbers of columns
on wide \code{data.frame}s.

\code{hash_df}s are bare-bones, with methods for adding (\code{bind}ing)
and deleting (\code{unbind}ing) variables as well as printing a
preview of the data. However, data analysis should be
done after converting back to a \code{data.frame} object with
\code{hash_df$return_df()}.
}
\examples{
df <- hash_df$new(iris)
for (name in df$vars) {
 if (is.numeric(df$data[[name]])) df$data[[name]] <- 2 * df$data[[name]]
}
wide_df <- as.data.frame(matrix(1:5000, nrow = 2))
hash_wide_df <- hash_df$new(wide_df)

for (name in hash_wide_df$vars) {
  hash_wide_df$data[[name]] <- -1 *  hash_wide_df$data[[name]]
}

timer <- bench::mark(
 check = F,
 for(name in names(wide_df)) wide_df[[name]] <- -1 * wide_df[[name]],
 for (name in hash_wide_df$vars) hash_wide_df$data[[name]] <- -1 *  hash_wide_df$data`[[name]]`
)
#> hash_df: Median = 22.2.3ms
#> data.frame: Median = 615.3ms


## ------------------------------------------------
## Method `hash_df$bind`
## ------------------------------------------------

df <- hash_df$new(iris)
df$bind(col_ones = 1, col_his = "hi")
df$print()

## ------------------------------------------------
## Method `hash_df$unbind`
## ------------------------------------------------

df <- hash_df$new(iris)
hash_df$unbind(Petal.Length)
df$print()
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{data}}{an \code{environment} containing the the data from a \code{data.frame}.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{nrow}}{the number of rows of the \code{data.frame}}

\item{\code{ncol}}{the number of columns of the \code{data.frame}}

\item{\code{vars}}{the variables (column names) of the \code{data.frame}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-bind}{\code{hash_df$bind()}}
\item \href{#method-unbind}{\code{hash_df$unbind()}}
\item \href{#method-return_df}{\code{hash_df$return_df()}}
\item \href{#method-print}{\code{hash_df$print()}}
\item \href{#method-new}{\code{hash_df$new()}}
\item \href{#method-clone}{\code{hash_df$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bind"></a>}}
\if{latex}{\out{\hypertarget{method-bind}{}}}
\subsection{Method \code{bind()}}{
add \code{data.frame} columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$bind(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{named columns to add}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{df <- hash_df$new(iris)
df$bind(col_ones = 1, col_his = "hi")
df$print()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-unbind"></a>}}
\if{latex}{\out{\hypertarget{method-unbind}{}}}
\subsection{Method \code{unbind()}}{
remove \code{data.frame} columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$unbind(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{names of the columns to remove}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{df <- hash_df$new(iris)
hash_df$unbind(Petal.Length)
df$print()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-return_df"></a>}}
\if{latex}{\out{\hypertarget{method-return_df}{}}}
\subsection{Method \code{return_df()}}{
return the \code{data.frame} from a \code{hash_df}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$return_df()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{data.frame} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
print a preview of the \code{data.frame}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create a new \code{hash_df} from a \code{data.frame}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$new(df)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a \code{data.frame}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hash_df$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
