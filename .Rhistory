<<<<<<< HEAD
=======
a <- numeric()
yield <- 0L
while(abs(yield) < 6) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 6) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
rm(a)
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 20) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
rm(a)
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 50) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
plot(a, type = "l")
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
mean(a)
source('~/pytools/R/random_walk.R')
mean(means)
class(collatz)
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
class(collatz)
class(unclass(collatz))
a <- numeric()
yield <- 0L
while(yield != 1) {
yield <- yield_next(collatz)
a <- append(a,yield)
}
length(a)
a
View(collatz)
a <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
b <- bench::mark(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
library(magrittr)
b <- bench::mark(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
View(a)
a
a <- bench::mark((2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)))
a
View(a)
b <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
View(b)
reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
m <- reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
m
class(m)
View(b[[11]][[1]])
View(a[[11]][[1]])
View(a[[11]][[1]])
View(b)
reticulate::source_python('~/pytools/R/collatz_py.py')
reticulate::repl_python()
reticulate::source_python('~/pytools/R/collatz_py.py')
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
d$mem_alloc
View(d)
c <- bench::mark(for (i in 1:30) yield_next(collatz))
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
c <- bench::mark(for (i in 1:30) yield_next(collatz_r))
c$median
c$mem_alloc
View(c)
yield_next(collatz_r)
yield_next(collatz_r)
yield_next(collatz_r)
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
yield_next(collatz_r)
c <- bench::mark(yield_next(collatz_r))
c$median
c$mem_alloc
reticulate::source_python(("collatz_py.py"))
getwd()
reticulate::source_python(("collatz_py.py"))
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
d$mem_alloc
lobstr::obj_sizes(collatz_r, collatz)
a$median
a <- bench::mark((2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)))
a$median
#> 29.7 ms
a$mem_alloc
#> 437 KB
b <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
b$median
#> 588 microseconds
b$mem_alloc
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
c <- bench::mark(yield_next(collatz_r))
c$median
#> 572 microseconds
c$mem_alloc
#> 560 B
reticulate::source_python(("collatz_py.py"))
setwd("home/storeddocumenstonline/Jacob-Goldsmith")
getwd
getwd()
setwd("/home/storeddocumenstonline/Jacob-Goldsmith")
setwd("/home/storeddocumentsonline/Jacob-Goldsmith")
#> 560 B
reticulate::source_python(("pytools_misc/collatz_py.py"))
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
#> 59.5 microseconds
d$mem_alloc
lobstr::obj_sizes(collatz_r, collatz)
View(r)
lobstr::obj(addr(r))
lobstr::obj_addr(r)
lobstr::obj_size(r)
object.size(r)
getwd()
library(pytools)
expr <-
'if (i == 0) {
n0 <- 1
n1 <- 1
n <- n0 + n1
}
if (i == 1) {
n0 <- 2
n1 <- 1
n <- 1
}
if (i > 1) {
n <- n0 + n1
a <- n1
b <- n0 + n1
n0 <- a
n1 <- b
}
i <- i + 1'
lucas <- Generator(expr,
current = c(i = 0,
a = 0,
b = 0,
n0 = 0,
n1 = 0,
n = 0),
yield = n)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
bench::mark(c("I", "Don't", "wan't", "chicken") %>% that_for_all('\'') %>% we_have(~stringr::str_detect(.x, .y)))
a <- bench::mark(c("I", "Don't", "wan't", "chicken") %>% that_for_all('\'') %>% we_have(~stringr::str_detect(.x, .y)))
View(a)
a <- bench::mark(2:1000 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
View(a)
View(a[[11]][[1]])
length(a[[11]][[1]])
nrow(a[[11]][[1]])
b <- bench::mark(reticulate::py_eval('{i for i in range(2,1001) if all(i % y for y in range(2,i-1))}'))
View(b)
setwd("/home/storeddocumentsonline/pytools")
getwd()
library(forcats)
library(purrr)
?map
library(pytools)
?that_for_all
library(magrittr)
?rlang
library(rlang)
?rlang::expr
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
collatz <- reticulate::py_iterator(sequence_generator(8))
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
View(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
collatz <- reticulate::py_iterator(sequence_generator(13423))
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
bench::mark(collatz <- reticulate::py_iterator(sequence_generator(13423)))
a <- bench::mark(collatz <- reticulate::py_iterator(sequence_generator(13423)))
View(a)
a$median
?`<<-`
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
means <- numeric(length = 100)
for (i in 1:100) {
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
try(rm(a))
a <- numeric()
yield <- 0L
while(abs(yield) < 50) {
yield <- yield_next(rw)
a <- append(a, yield)
}
means[i] <- mean(a)
}
means
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
rw <- Generator(result = expr,
current = c(n = 0),
yield = n)
yield_next(rw)
expr <- "n <- n + sample(c(-1,1), size = 1)"
rw <- Generator(result = expr,
current = c(n = 0),
yield = n)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 13423),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2 else n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 13423),
yield = n)
yield_next(collatz)
yield_next(collatz)
>>>>>>> 4740ccddd35aa43b82ae3f65d3fa181262711579
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2 else n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 8),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 8),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
View(collatz)
View(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 10),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
collatz <- Generator(result = expr,
current = c(n = 10),
yield = n)
View(collatz)
yield_next(collatz)
View(collatz)
n <- 10
if (n %% 2 == 0) n <- n / 2
n
library(dplyr)
?filter
df %>% filter(!stringr::str_detect(.,“[:]”))
df %>% filter(!stringr::str_detect(.data,“[:]”))
?rowwise
df <- map_df(iris, !stringr::str_detect(.data, "[:]"))
?map
df <- iris %>% filter(across(~stringr::str_detect(.x, "[:]")))
df <- iris %>% filter(where(~stringr::str_detect(.x, "[:]")))
?filter_if
df <- iris %>% filter(across(everything(), ~ stringr::str_detect("[:]")))
df <- iris %>% filter(across(everything(), ~ stringr::str_detect(.x, "[:]")))
df <- iris %>% filter(across(everything(), ~ !stringr::str_detect(.x, "[:]")))
View(df)
df <- iris %>% filter(across(everything(), ~ !stringr::str_detect(.x, "[v]")))
head(iris)
attr("string")
attributes("string")
?character
a <- character(length = 10000L)
for (i in seq_along(a)) a[i] <- "n"
bench::mark(length(a))
?nchar
a <- "n"
for (i in 1:10000) a <- paste0(a, "n")
b <- bench::mark(nchar(a))
View(b)
c <- "nnnnnnn"
d <- bench::mark(nchar(c))
View(d)
i <- 0
e <- bench::mark(for (i in 1:10000) i <- i + 1)
View(e)
?nchar
<<<<<<< HEAD
install.packages(c("tidyverse", "randomForest", "rlang", "Rcpp"))
library(tidyverse)
library(httr)
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("reticulate")
library(reticulate)
repl_python()
Y
Rcpp::sourceCpp('cpp.cpp')
View(timesTwo)
Rcpp::sourceCpp('cpp.cpp')
View(timesTwo)
Rcpp::sourceCpp('cpp.cpp')
Rcpp::sourceCpp('cpp.cpp')
Rcpp::sourceCpp('cpp.cpp')
Rcpp::sourceCpp('cpp.cpp')
Rcpp::sourceCpp('cpp.cpp')
library(httr)
?sys.frame
?pivot_longer
library(tidyr)
?pivot_longer
?facet
library(ggplot2)
?facet
?facet_wrap
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
?sys.frame
sys.frames()
sys.nframe()
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
f1 <- ~.x - .y
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
library(itertools)
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
source('~/itertools/R/that_for_{all,any}.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
source('~/itertools/R/range.R')
1:100 %>% that_for_all(range(2,x)) %>% we_have(.x %% .y != 0, "lazy")
1:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0, "lazy")
library(itertools)
library(itertools)
iter <- 1:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0, "lazy")
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)) %>%
#'     that_for_any(range(2,x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
)
library(itertools)
(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)) %>%
#'     that_for_any(range(2,x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)) %>%
that_for_any(range(2,x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
?that_for_all
devtools::document()
devtools::document()
library(itertools)
2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)
reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
primes <- 2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0, "lazy")
c("I", "Don't", "wan't", "chicken") %>% that_for_all('\'') %>% we_have(~stringr::str_detect(.x, .y))
primes <- 2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)
primes %>% that_for_any(primes) %>% we_have(~abs(.x - .y) == 2)
devtools::document()
.x = 4
.x = 4
x = 4
?`.`
?vector
a <- vector(mode = "numeric", length = 0)
a <- function(.x)
b <- function(.x) .x + 4
b(3)
a <- list(.x = 3, .y = 3)
View(a)
a$.x
.x <- 4
`.x` <- 4
a$.x <= 4
a$.x <- 4
View(a)
?$6
?R6
source('~/itertools/R/that_for_{all,any}.R')
2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)
library(magrittr)
2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)
?rlang::eval_bare
?env
source('~/itertools/R/that_for_{all,any}.R')
2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)
that_for_all(1:100, 2:.x)
source('~/itertools/R/that_for_{all,any}.R')
2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)
source('~/itertools/R/range.R')
2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)
iter <- 2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0, "Iterator")
source('~/itertools/R/Iterator.R')
iter <- 2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0, "Iterator")
yield_next(iter)
source('~/itertools/R/yield_next.R')
yield_next(iter)
source('~/itertools/R/is_Iterator.R')
yield_next(iter)
source('~/itertools/R/that_for_{all,any}.R')
iter <- 2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0, "Iterator")
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
yield_next(iter)
2:100 %>% that_for_all(range(2,.x)) %>% we_have(function(.x, .y) .x %% .y != 0)
devtools::document()
devtools::document()
devtools::document()
reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
library(itertools)
?that_for_all
library(itertools)
?that_for_any
c("I", "Don't", "wan't", "chicken") %>% that_for_all("\'") %>% we_have(~stringr::str_detect(.x, .y)
c("I", "Don't", "wan't", "chicken") %>% that_for_all("\'") %>% we_have(~stringr::str_detect(.x, .y))
library(itertools)
devtools::document()
devtools::document()
devtools::document()
?devtools::document
devtools::document()
devtools::document()
library(itertools)
?hash_df
devtools::document()
library(itertools)
?hash_df
devtools::document()
hash_df <- R6::R6Class("hash_df",
public = list(
#' @field data an `environment` containing the the data from a `data.frame`.
data = NA,
#' @description add `data.frame` columns
#' @param ... named columns to add
#' @examples
#' df <- hash_df$new(iris)
#' df$bind(col_ones = 1, col_his = "hi")
#' df$print()
bind = function(...) {
x <- rlang::dots_list(..., .named = T)
rlang::env_bind(self$data, !!!x)
invisible(self)
},
#' @description remove `data.frame` columns
#' @param ... names of the columns to remove
#' @examples
#' df <- hash_df$new(iris)
#' hash_df$unbind(Petal.Length)
#' df$print()
unbind = function(...) {
x <- unlist(as.character(enexprs(...)))
rlang::env_unbind(self$data, x)
invisible(self)
},
#' @description return the `data.frame` from a `hash_df`
#' @return A `data.frame` object
return_df = function() {
as.data.frame(as.list(self$data))
},
#' @description print a preview of the `data.frame`
print = function() {
print(self$return_df()[1:20,])
},
#' @description create a new `hash_df` from a `data.frame`
#' @param df a `data.frame`
initialize = function(df) {
stopifnot(is.data.frame(df))
self$data = list2env(df)
private$.nrow = nrow(df)
private$.ncol = ncol(df)
private$.vars = names(df)
}
),
active = list(
nrow = function(value) {
if (missing(value)) nrow(self$return_df()) else stop("cannot replace `nrow` manually")
},
ncol = function(value) {
if (missing(value)) ncol(self$return_df()) else stop("cannot replace `ncol` manually")
},
vars = function(value) {
if (missing(value))  names(self$data) else stop("cannot replace `vars` manually")
}
),
private = list(
.nrow = NA,
.ncol = NA,
.vars = NA
))
devtools::document()
library(itertools)
warnings()
?hash_df
df <- hash_df$new(iris)
class(df)
type(df)
rlang::type(df)
class(unclass((df))
)
class(hash_df)
View(hash_df)
df$delete()
rm(df)
library(itertools)
devtools::document()
library(itertools)
is.environment(hash_df)
df <- hash_df$new(iris)
is.environment(df)
rlang::env_names(df)
lobstr::obj_addr(hash_df)
sum(.Machine$integer.max, 1L)
.Machine$integer.max
a <- sum(.Machine$integer.max, 1L)
is.integer(a)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$View()
hash_mtcars <- hash_df$new(mtcars)
hash_mtcars$data <- lapply(hash_mtcars$data, ~log(.x + 1))
hash_mtcars$data <- lapply(hash_mtcars$data, function(x) log(x + 1))
hash_mtcars$print()
source('~/itertools/R/hash_df.R')
p <- hash_df$new(mtcars)
p <- hash_df$new(as.matrix(mtcars))
p$print()
source('~/itertools/R/hash_df.R')
source('~/itertools/R/hash_df.R')
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
df$mutate(Sepal.Length = 2 * Sepal.Width, x = 2)
df$data
df$print()
`!!!`
env <- rlang::env(x = 1, y = 2, z = 3)
env[["x","y"]]
env[[c("x","y")]]
env[[list("x","y")]]
env[[c(x,y)]]
env[[x]]
env[['x']]
?rlang::env_get_list
source('~/itertools/R/hash_df.R')
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
df$data
df$print(0)
df$print()
vars <- unlist(as.character(rlang::ensyms(Sepal.Length, Sepal.Width)))
vars <- unlist(as.character(rlang::syms(Sepal.Length, Sepal.Width)))
vars <- unlist(as.character(rlang::exprs(Sepal.Length, Sepal.Width)))
vars_char <- paste0(vars, sep = ",")
?paste0
vars_char <- paste0(vars, sep = "", collapse = ",")
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
df$print()
env <- list2env(iris)
rlang::env_get_list(env, vars_char, default=NA))
rlang::env_get_list(env, vars_char, default=NA)
?rlang::env_get_list
vars_char <- paste0(vars, sep = "", collapse = ", ")
rlang::env_get_list(env, vars_char, default=NA)
rlang::env_get_list(env, vars, default=NA)
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
df$print()
df$select(Sepal.Length, Sepal.Width, m)
df$print()
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width, m)
?tryCatch
source('~/itertools/R/hash_df.R')
df <- hash_df$new(iris)
df$select(Sepal.Length, Sepal.Width)
df$print()
df$select(Sepal.Width, m)
devtools::document()
devtools::document()
library(itertools)
?hash_df
devtools::document()
?magrittr
?dplyr
library(dplyr)
?dplyr
sessionInfo()
usethis::use_testthat()
use_test()
library(testthat)
use_test()
libary(usethis)
library(usethis)
use_test()
2:100 %>% that_for_all(range(2, .x)) %>% we_have(~.x %% .y != 0)
2:100 %>% that_for_all(range(2, .x)) %>% we_have(~.x %% .y != 0)[7]
a<-2:100 %>% that_for_all(range(2, .x)) %>% we_have(~.x %% .y != 0)
a[7]
(2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)) %>%
#'     that_for_any(range(2, .x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
)
(2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)) %>%
that_for_any(range(2, .x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
library(magrittr)
(2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)) %>%
that_for_any(range(2, .x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
library(itertools)
(2:100 %>% that_for_all(range(2,.x)) %>% we_have(~.x %% .y != 0)) %>%
that_for_any(range(2, .x)) %>% we_have(~sqrt(.x + 2) == .y | sqrt(.x - 2) == .y)
c("I", "Don't", "wan't", "chicken") %>%
that_for_all("\'") %>%
we_have(~stringr::str_detect(.x, .y))
expr <- "if (n %% 2 == 0) n <- n / 2 else n <- n*3 + 1";
collatz <- Iterator(result = expr,
initial = c(n = 50),
yield = n));
collatz <- Iterator(result = expr,
initial = c(n = 50),
yield = n);
yield_next(collatz)
df <- hash_df$new(iris);
df$mutate(Sepal.Size = Sepal.Length * Sepal.Width)
(df$print())[1,1]
(df$return_df())[1,1]
hash_mtcars <- hash_df$new(mtcars);
hash_mtcars$data <- lapply(hash_mtcars$data, function(x) log(x + 1));
hash_df$return_df())[1,1]
hash_df$return_df()[1,1]
(hash_df$return_df())[1,1]
(hash_mtcars$return_df())[1,1]
{hash_mtcars <- hash_df$new(mtcars);
hash_mtcars$data <- lapply(hash_mtcars$data, function(x) log(x + 1));
(hash_mtcars$return_df())[1,1]}
{c("I", "Don't", "wan't", "chicken") %>%
that_for_all("\'") %>%
we_have(~stringr::str_detect(.x, .y))[1]}
{(c("I", "Don't", "wan't", "chicken") %>%
that_for_all("\'") %>%
we_have(~stringr::str_detect(.x, .y)))[1]}
{hash_mtcars <- hash_df$new(mtcars);
hash_mtcars$data <- lapply(hash_mtcars$data, function(x) log(x + 1));
(hash_mtcars$return_df())[1,1]}
?expect_equal
library(testthat)
?expect_equal
?testthat
test_that("trigonometric functions match identities", {
expect_equal(sin(pi / 4), 1)
})
df <- hash_df$new(iris)
df$select(Sepal.Length, Species)
df$mutate(Sepal.Area = Sepal.Length * 2)
df$select(Sepal.Area)
df$print()
df <- hash_df$new()
df <- hash_df$new(iris)
df$mutate(Sepal.Area = Sepal.Width * Sepal.Length, Petal.Area = Petal.Length * Petal.Width)
df$print()
df$select(Sepal.Area, Petal.Area)
df$print()
df$mutate(Petal.Area = Petal * 2)
base:::eval
testthat:::test_check
View(collatz)
=======
>>>>>>> 4740ccddd35aa43b82ae3f65d3fa181262711579
