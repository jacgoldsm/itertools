a <- numeric()
yield <- 0L
while(abs(yield) < 6) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 6) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
rm(a)
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 20) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
rm(a)
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
a <- numeric()
yield <- 0L
while(abs(yield) < 50) {
yield <- yield_next(rw)
a <- append(a, yield)
}
a
plot(a, type = "l")
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
source('~/pytools/R/random_walk.R')
mean(a)
source('~/pytools/R/random_walk.R')
mean(means)
class(collatz)
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
class(collatz)
class(unclass(collatz))
a <- numeric()
yield <- 0L
while(yield != 1) {
yield <- yield_next(collatz)
a <- append(a,yield)
}
length(a)
a
View(collatz)
a <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
b <- bench::mark(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
library(magrittr)
b <- bench::mark(2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
View(a)
a
a <- bench::mark((2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)))
a
View(a)
b <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
View(b)
reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
m <- reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}')
m
class(m)
View(b[[11]][[1]])
View(a[[11]][[1]])
View(a[[11]][[1]])
View(b)
reticulate::source_python('~/pytools/R/collatz_py.py')
reticulate::repl_python()
reticulate::source_python('~/pytools/R/collatz_py.py')
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
d$mem_alloc
View(d)
c <- bench::mark(for (i in 1:30) yield_next(collatz))
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
c <- bench::mark(for (i in 1:30) yield_next(collatz_r))
c$median
c$mem_alloc
View(c)
yield_next(collatz_r)
yield_next(collatz_r)
yield_next(collatz_r)
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
yield_next(collatz_r)
c <- bench::mark(yield_next(collatz_r))
c$median
c$mem_alloc
reticulate::source_python(("collatz_py.py"))
getwd()
reticulate::source_python(("collatz_py.py"))
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
d$mem_alloc
lobstr::obj_sizes(collatz_r, collatz)
a$median
a <- bench::mark((2:100 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0)))
a$median
#> 29.7 ms
a$mem_alloc
#> 437 KB
b <- bench::mark(reticulate::py_eval('{i for i in range(2,101) if all(i % y for y in range(2,i-1))}'))
b$median
#> 588 microseconds
b$mem_alloc
#Generator
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz_r <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
c <- bench::mark(yield_next(collatz_r))
c$median
#> 572 microseconds
c$mem_alloc
#> 560 B
reticulate::source_python(("collatz_py.py"))
setwd("home/storeddocumenstonline/Jacob-Goldsmith")
getwd
getwd()
setwd("/home/storeddocumenstonline/Jacob-Goldsmith")
setwd("/home/storeddocumentsonline/Jacob-Goldsmith")
#> 560 B
reticulate::source_python(("pytools_misc/collatz_py.py"))
d <-bench::mark(reticulate::py_eval("next(collatz)"))
d$median
#> 59.5 microseconds
d$mem_alloc
lobstr::obj_sizes(collatz_r, collatz)
View(r)
lobstr::obj(addr(r))
lobstr::obj_addr(r)
lobstr::obj_size(r)
object.size(r)
getwd()
library(pytools)
expr <-
'if (i == 0) {
n0 <- 1
n1 <- 1
n <- n0 + n1
}
if (i == 1) {
n0 <- 2
n1 <- 1
n <- 1
}
if (i > 1) {
n <- n0 + n1
a <- n1
b <- n0 + n1
n0 <- a
n1 <- b
}
i <- i + 1'
lucas <- Generator(expr,
current = c(i = 0,
a = 0,
b = 0,
n0 = 0,
n1 = 0,
n = 0),
yield = n)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
yield_next(lucas)
bench::mark(c("I", "Don't", "wan't", "chicken") %>% that_for_all('\'') %>% we_have(~stringr::str_detect(.x, .y)))
a <- bench::mark(c("I", "Don't", "wan't", "chicken") %>% that_for_all('\'') %>% we_have(~stringr::str_detect(.x, .y)))
View(a)
a <- bench::mark(2:1000 %>% that_for_all(range(2,x)) %>% we_have(~.x %% .y != 0))
View(a)
View(a[[11]][[1]])
length(a[[11]][[1]])
nrow(a[[11]][[1]])
b <- bench::mark(reticulate::py_eval('{i for i in range(2,1001) if all(i % y for y in range(2,i-1))}'))
View(b)
setwd("/home/storeddocumentsonline/pytools")
getwd()
library(forcats)
library(purrr)
?map
library(pytools)
?that_for_all
library(magrittr)
?rlang
library(rlang)
?rlang::expr
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
expr <- 'if (n0 %% 2 == 0) n <- n0 / 2
if (n0 %% 2 != 0) n <- n0*3 + 1
n0 <- n'
collatz <- Generator(result = expr,
current = c(n0 = 13423,
n = 0),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
collatz <- reticulate::py_iterator(sequence_generator(8))
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
View(collatz)
source('~/pytools/R/py_iterators.R')
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
collatz <- reticulate::py_iterator(sequence_generator(13423))
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
reticulate::iter_next(collatz)
bench::mark(collatz <- reticulate::py_iterator(sequence_generator(13423)))
a <- bench::mark(collatz <- reticulate::py_iterator(sequence_generator(13423)))
View(a)
a$median
?`<<-`
expr <- "n <- n0 + sample(c(-1,1), size = 1)
n0 <- n"
means <- numeric(length = 100)
for (i in 1:100) {
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
try(rm(a))
a <- numeric()
yield <- 0L
while(abs(yield) < 50) {
yield <- yield_next(rw)
a <- append(a, yield)
}
means[i] <- mean(a)
}
means
rw <- Generator(result = expr,
current = c(n0 = 0, n = 0),
yield = n)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
rw <- Generator(result = expr,
current = c(n = 0),
yield = n)
yield_next(rw)
expr <- "n <- n + sample(c(-1,1), size = 1)"
rw <- Generator(result = expr,
current = c(n = 0),
yield = n)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
yield_next(rw)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 13423),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2 else n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 13423),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2 else n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 8),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 8),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
View(collatz)
View(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
expr <- 'if (n %% 2 == 0) n <- n / 2
if (n %% 2 != 0) n <- n*3 + 1'
collatz <- Generator(result = expr,
current = c(n = 10),
yield = n)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
yield_next(collatz)
collatz <- Generator(result = expr,
current = c(n = 10),
yield = n)
View(collatz)
yield_next(collatz)
View(collatz)
n <- 10
if (n %% 2 == 0) n <- n / 2
n
library(dplyr)
?filter
df %>% filter(!stringr::str_detect(.,“[:]”))
df %>% filter(!stringr::str_detect(.data,“[:]”))
?rowwise
df <- map_df(iris, !stringr::str_detect(.data, "[:]"))
?map
df <- iris %>% filter(across(~stringr::str_detect(.x, "[:]")))
df <- iris %>% filter(where(~stringr::str_detect(.x, "[:]")))
?filter_if
df <- iris %>% filter(across(everything(), ~ stringr::str_detect("[:]")))
df <- iris %>% filter(across(everything(), ~ stringr::str_detect(.x, "[:]")))
df <- iris %>% filter(across(everything(), ~ !stringr::str_detect(.x, "[:]")))
View(df)
df <- iris %>% filter(across(everything(), ~ !stringr::str_detect(.x, "[v]")))
head(iris)
attr("string")
attributes("string")
?character
a <- character(length = 10000L)
for (i in seq_along(a)) a[i] <- "n"
bench::mark(length(a))
?nchar
a <- "n"
for (i in 1:10000) a <- paste0(a, "n")
b <- bench::mark(nchar(a))
View(b)
c <- "nnnnnnn"
d <- bench::mark(nchar(c))
View(d)
i <- 0
e <- bench::mark(for (i in 1:10000) i <- i + 1)
View(e)
?nchar
